@page "/category/{categoryName}"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using SinusWebShopLeutrim.Models
@using System.Net.Http.Json

<div class="container">
    <div class="sidebar">
        <h2>Filters</h2>
        <div class="filter">
            <label for="brand-select">Brand:</label>
            <select id="brand-select" @bind="SelectedBrand">
                <option value="">All Brands</option>
                @foreach (var brand in ProductBrands)
                {
                    <option value="@brand">@brand</option>
                }
            </select>
        </div>

        <div class="filter">
            <label for="price-select">Price Range:</label>
            <select id="price-select" @bind="SelectedPriceRange">
                <option value="">All Prices</option>
                @foreach (var priceRange in PriceRanges)
                {
                    <option value="@priceRange">@priceRange</option>
                }
            </select>
        </div>
        <button class="apply-button" @onclick="ApplyFilters">Apply Filters</button>
    </div>

    <div class="main-content">
        <h1>@(CategoryName != null ? CategoryName.Substring(0, 1).ToUpper() + CategoryName.Substring(1) : "") Products</h1>

        @if (FilteredProducts != null && FilteredProducts.Any())
        {
            <div class="product-grid">
                @foreach (var product in FilteredProducts)
                {
                    <div class="product-card" @onclick="() => NavigateToProductDetails(product.Id)">
                        <img src="@product.Thumbnail" alt="@product.Title" />
                        <div class="product-details">
                            <h3>@product.Title</h3>
                            <p>Price: @product.Price</p>
                            <button class="details-button">View Details</button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No products found for @CategoryName category.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? CategoryName { get; set; }
    public List<Product> ProductList { get; set; } = new List<Product>();
    public List<Product> FilteredProducts { get; set; } = new List<Product>();
    public string? SelectedBrand { get; set; }
    public string? SelectedPriceRange { get; set; }
    public List<string> ProductBrands { get; set; } = new List<string>();
    public List<string> PriceRanges { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Root result = await httpClient.GetFromJsonAsync<Root>("products");
            if (result != null)
            {
                ProductList = result.Products.Where(p => p.Category == CategoryName).ToList();
                ProductBrands = ProductList.Select(p => p.Brand).Distinct().ToList();
                PriceRanges = ProductList.Select(p => p.Price).Distinct().Select(price => $"{price}-{price + 50}").ToList();

                FilterProducts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private void FilterProducts()
    {
        FilteredProducts = ProductList;

        if (!string.IsNullOrEmpty(SelectedBrand))
        {
            FilteredProducts = FilteredProducts.Where(p => p.Brand == SelectedBrand).ToList();
        }

        if (!string.IsNullOrEmpty(SelectedPriceRange))
        {
            var priceRange = SelectedPriceRange.Split('-').Select(int.Parse).ToList();
            FilteredProducts = FilteredProducts.Where(p => p.Price >= priceRange[0] && p.Price <= priceRange[1]).ToList();
        }
    }

    private void ApplyFilters()
    {
        FilterProducts();
    }

    private void NavigateToProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
}

<style>
    .container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .sidebar {
        width: 250px;
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .main-content {
        flex-grow: 1;
        padding-left: 20px;
    }

    h1 {
        font-size: 24px;
    }

    .filter {
        margin-bottom: 20px;
    }

    label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    select, .apply-button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border-radius: 4px;
        border: 1px solid #ccc;
        margin-bottom: 10px;
    }

    .apply-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        grid-gap: 20px;
        justify-items: center;
    }

    .product-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }

        .product-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

    .product-details {
        padding: 20px;
    }

    .details-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .details-button:hover {
            background-color: #0056b3;
        }
</style>
